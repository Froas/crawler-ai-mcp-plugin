import requests
from urllib.parse import urlencode


class SwitchToQuickSearch:
    def __init__(self):
        self.form_url = "https://www2.jpx.co.jp/tseHpFront/JJK020010Action.do"
        self.submit_url = "https://www2.jpx.co.jp/tseHpFront/JJK020020Action.do"
        self.session = requests.Session()
        self.jsessionid = None

        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'Connection': 'keep-alive'
        })

    def get_session(self):
        try:
            response = self.session.get(self.form_url)
            for cookie in self.session.cookies:
                if cookie.name == 'JSESSIONID':
                    self.jsessionid = cookie.value
                    break
            print(f"‚úÖ JSESSIONID: {self.jsessionid}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")
            return False

    def switch_to_quick_search(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ Quick Search"""

        if not self.get_session():
            return False

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Quick Search
        switch_data = [
            ('Switch', 'Switch'),  # –ö–õ–Æ–ß–ï–í–û–ô –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        ]

        target_url = f"{self.submit_url};jsessionid={self.jsessionid}"

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': 'https://www2.jpx.co.jp',
            'Referer': f"{self.form_url};jsessionid={self.jsessionid}",
        }

        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Quick Search...")
        print(f"üîÑ URL: {target_url}")

        try:
            response = self.session.post(target_url, data=switch_data, headers=headers)

            print(f"üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üì• –†–∞–∑–º–µ—Ä: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –ª–∏ –º—ã –Ω–∞ Quick Search
            if "Quick search" in response.text and "<strong>" in response.text:
                # –ò—â–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –≤—ã–¥–µ–ª–µ–Ω–æ –∂–∏—Ä–Ω—ã–º
                if "Quick search</strong>" in response.text:
                    print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ Quick Search!")
                    return True
                else:
                    print("‚ùå –í—Å–µ –µ—â–µ –Ω–∞ Detailed Search")
                    return False
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def test_quick_search_after_switch(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Quick Search –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"""

        if not self.switch_to_quick_search():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Quick Search")
            return ""

        # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Quick Search
        form_data = [
            ('dspSsuPd', '100'),
            ('szkbuChkbxMapOut',
             '011>Prime<012>Standard<013>Growth<008>TOKYO PRO Market<bj1>Ôºç<be1>Ôºç<111>Prime Foreign Stocks<112>Standard Foreign Stocks<113>Growth Foreign Stocks<bj2>Ôºç<be2>Ôºç<ETF>ETFs<ETN>ETNs<RET>Real Estate Investment Trusts (REITs)<IFD>Infrastructure Funds<999>Others<'),
            ('ListShow', 'ListShow'),
            ('sniMtGmnId', ''),
            ('dspSsuPdMapOut', '10>10<50>50<100>100<200>200<'),
            ('mgrMiTxtBx', ''),
            ('eqMgrCd', ''),
            ('szkbuChkbx', '011'),
        ]

        target_url = f"{self.submit_url};jsessionid={self.jsessionid}"

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': 'https://www2.jpx.co.jp',
            'Referer': f"{self.form_url};jsessionid={self.jsessionid}",
        }

        print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Quick Search –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è...")

        try:
            response = self.session.post(target_url, data=form_data, headers=headers)

            print(f"üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üì• –†–∞–∑–º–µ—Ä: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")

            content = response.text

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
            has_errors = any(error in content for error in [
                "should 1 or more checks", "is not a right date", "Error"
            ])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
            has_success = any(indicator in content for indicator in [
                "Display of", "13010", "KYOKUYO"
            ])

            print(f"‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏: {has_errors}")
            print(f"‚úÖ –ï—Å—Ç—å —É—Å–ø–µ—Ö: {has_success}")

            if has_errors:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                import re
                error_match = re.search(r'<span id="cgTabError"[^>]*>(.*?)</span>', content, re.DOTALL)
                if error_match:
                    error_text = error_match.group(1).strip()
                    print(f"‚ùå –û—à–∏–±–∫–∞: {error_text}")

            if has_success and not has_errors:
                print("üéâ QUICK SEARCH –†–ê–ë–û–¢–ê–ï–¢!")
                with open('switch_success.html', 'w', encoding='utf-8') as f:
                    f.write(content)
                return content
            else:
                print("‚ùå Quick Search –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                with open('switch_error.html', 'w', encoding='utf-8') as f:
                    f.write(content)
                return ""

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return ""


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä—è–º–æ–π Quick Search URL
class DirectQuickSearch:
    def __init__(self):
        self.form_url = "https://www2.jpx.co.jp/tseHpFront/JJK020010Action.do"
        self.submit_url = "https://www2.jpx.co.jp/tseHpFront/JJK020020Action.do"
        self.session = requests.Session()
        self.jsessionid = None

        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        })

    def get_session(self):
        try:
            response = self.session.get(self.form_url)
            for cookie in self.session.cookies:
                if cookie.name == 'JSESSIONID':
                    self.jsessionid = cookie.value
                    break
            return True
        except:
            return False

    def test_with_show_parameter(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º Show –≤–º–µ—Å—Ç–æ ListShow"""

        if not self.get_session():
            return ""

        # –ü—Ä–æ–±—É–µ–º Show –≤–º–µ—Å—Ç–æ ListShow (–¥–ª—è Quick Search)
        form_data = [
            ('Show', 'Show'),  # –í–º–µ—Å—Ç–æ ListShow
            ('dspSsuPd', '50'),
            ('szkbuChkbx', '011'),  # Prime
            ('mgrMiTxtBx', ''),
            ('eqMgrCd', ''),
        ]

        target_url = f"{self.submit_url};jsessionid={self.jsessionid}"

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': 'https://www2.jpx.co.jp',
            'Referer': f"{self.form_url};jsessionid={self.jsessionid}",
        }

        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º Show (Quick Search)...")
        print(f"üß™ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(form_data)}")

        try:
            response = self.session.post(target_url, data=form_data, headers=headers)

            print(f"üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üì• –†–∞–∑–º–µ—Ä: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")

            content = response.text

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            has_errors = "should 1 or more checks" in content
            has_companies = any(ind in content for ind in ["Display of", "13010", "KYOKUYO"])

            print(f"‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏: {has_errors}")
            print(f"‚úÖ –ï—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏: {has_companies}")

            if has_companies and not has_errors:
                print("üéâ SHOW –ü–ê–†–ê–ú–ï–¢–† –†–ê–ë–û–¢–ê–ï–¢!")
                with open('show_success.html', 'w', encoding='utf-8') as f:
                    f.write(content)
                return content
            else:
                with open('show_error.html', 'w', encoding='utf-8') as f:
                    f.write(content)
                return ""

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return ""


def main():
    print("üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –ù–ê QUICK SEARCH")
    print("=" * 70)

    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Switch
    print("\n1Ô∏è‚É£ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Switch –ø–∞—Ä–∞–º–µ—Ç—Ä...")
    switcher = SwitchToQuickSearch()
    switch_result = switcher.test_quick_search_after_switch()
    switch_success = bool(switch_result)

    # –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–π Quick Search —Å Show
    print("\n2Ô∏è‚É£ –ü—Ä—è–º–æ–π Quick Search —Å Show –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º...")
    direct = DirectQuickSearch()
    show_result = direct.test_with_show_parameter()
    show_success = bool(show_result)

    print("\n" + "=" * 70)
    print("üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø")
    print("=" * 70)
    print(f"üîÑ Switch method:  {'üéâ –†–ê–ë–û–¢–ê–ï–¢!' if switch_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"üß™ Show method:    {'üéâ –†–ê–ë–û–¢–ê–ï–¢!' if show_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")

    if switch_success or show_success:
        print("\nüéä –û–î–ò–ù –ò–ó –ú–ï–¢–û–î–û–í –†–ê–ë–û–¢–ê–ï–¢!")
        print("üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("\nüòï –ù—É–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥...")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, Quick Search –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π URL –∏–ª–∏ –º–µ—Ö–∞–Ω–∏–∑–º")


if __name__ == "__main__":
    main()